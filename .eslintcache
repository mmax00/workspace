[{"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\index.js":"1","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\App.js":"2","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\navigation-bar\\navigation-bar.component.jsx":"3","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\workspace\\workspace.component.jsx":"4","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu\\menu.component.jsx":"5","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\todo\\todo.menu-component.jsx":"6","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\Note\\note.menu-component.jsx":"7","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\timer\\timer.menu-component.jsx":"8","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\audio\\audioPlayer.js":"9","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\audio\\AudioPlayer.js":"10","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\player\\player.menu-component.jsx":"11","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\draw\\draw.menu-component.jsx":"12","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\position-handler.js":"13"},{"size":168,"mtime":1608831391797,"results":"14","hashOfConfig":"15"},{"size":912,"mtime":1608831369079,"results":"16","hashOfConfig":"15"},{"size":509,"mtime":1608369854155,"results":"17","hashOfConfig":"15"},{"size":3017,"mtime":1608645071009,"results":"18","hashOfConfig":"15"},{"size":992,"mtime":1608829846242,"results":"19","hashOfConfig":"15"},{"size":2872,"mtime":1608831626176,"results":"20","hashOfConfig":"15"},{"size":1186,"mtime":1608831486384,"results":"21","hashOfConfig":"15"},{"size":8666,"mtime":1608831118793,"results":"22","hashOfConfig":"15"},{"size":239,"mtime":1608393629382,"results":"23","hashOfConfig":"15"},{"size":239,"mtime":1608393629382,"results":"24","hashOfConfig":"15"},{"size":2197,"mtime":1608830598841,"results":"25","hashOfConfig":"15"},{"size":4303,"mtime":1608831495048,"results":"26","hashOfConfig":"15"},{"size":1599,"mtime":1608632875584,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"57zj3q",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\index.js",[],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\App.js",[],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\navigation-bar\\navigation-bar.component.jsx",[],["57","58"],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\workspace\\workspace.component.jsx",[],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu\\menu.component.jsx",[],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\todo\\todo.menu-component.jsx",["59"],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\Note\\note.menu-component.jsx",["60"],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\timer\\timer.menu-component.jsx",["61"],"import React, { useState, useEffect } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nimport \"./timer.styles.css\";\r\nimport restartImg from \"../../../images/restart.png\";\r\nimport AudioPlayer from \"../../../audio/AudioPlayer.js\";\r\nimport { setOnLoadPosition } from \"../position-handler\";\r\n\r\nconst Stopwatch = () => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [play, setPlay] = useState(false);\r\n\r\n  useEffect(() => {\r\n    /*Function that is called every second*/\r\n    const interval = setInterval(() => {\r\n      if (play) setSeconds((seconds) => seconds + 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  function restartStopwatch() {\r\n    setSeconds(0);\r\n  }\r\n\r\n  function convertSeconds(seconds) {\r\n    /*Hours,minutes and seconds calculated from seconds and then formated*/\r\n    let hours = parseInt(seconds / 3600);\r\n    seconds = seconds - hours * 3600;\r\n    let minutes = parseInt(seconds / 60);\r\n    seconds = seconds - minutes * 60;\r\n\r\n    seconds = (\"00\" + seconds.toString()).slice(-2);\r\n    minutes = (\"00\" + minutes.toString()).slice(-2);\r\n    hours = (\"00\" + hours.toString()).slice(-2);\r\n\r\n    return `${hours}:${minutes}:${seconds}`;\r\n  }\r\n\r\n  return (\r\n    <div id=\"stopwatch\">\r\n      <p>{convertSeconds(seconds)}</p>\r\n\r\n      <div\r\n        className={play ? \"playButton pause\" : \"playButton\"}\r\n        onClick={() => setPlay((p) => !p)}\r\n      ></div>\r\n\r\n      <img src={restartImg} alt=\"\" onClick={restartStopwatch} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Countdown = () => {\r\n  const [play, setPlay] = useState(false);\r\n  const [cdtime, setCdtime] = useState({ hours: 0, minutes: 0, seconds: 0 });\r\n  const alarm = new AudioPlayer();\r\n\r\n  function countdownFunc() {\r\n    setCdtime((prev) => {\r\n      if (prev.seconds <= 0) {\r\n        if (prev.minutes <= 0) {\r\n          if (prev.hours <= 0) {\r\n            alarm.play();\r\n            setPlay(false);\r\n            return {\r\n              hours: 0,\r\n              minutes: 0,\r\n              seconds: 0,\r\n            };\r\n          } else\r\n            return {\r\n              hours: prev.hours - 1,\r\n              minutes: 59,\r\n              seconds: 59,\r\n            };\r\n        } else\r\n          return {\r\n            hours: prev.hours,\r\n            minutes: prev.minutes - 1,\r\n            seconds: 59,\r\n          };\r\n      } else\r\n        return {\r\n          hours: prev.hours,\r\n          minutes: prev.minutes,\r\n          seconds: prev.seconds - 1,\r\n        };\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    /*Function that is called every second*/\r\n    const interval = setInterval(() => {\r\n      if (play) countdownFunc();\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  return (\r\n    <div id=\"countdown\">\r\n      <div id=\"timeset\">\r\n        <input\r\n          type=\"number\"\r\n          onChange={(e) =>\r\n            setCdtime((prev) => {\r\n              return {\r\n                hours: parseInt(e.target.value),\r\n                minutes: prev.minutes,\r\n                seconds: prev.seconds,\r\n              };\r\n            })\r\n          }\r\n          value={cdtime.hours}\r\n        ></input>\r\n\r\n        <h1>:</h1>\r\n\r\n        <input\r\n          type=\"number\"\r\n          max=\"60\"\r\n          onChange={(e) =>\r\n            setCdtime((prev) => {\r\n              return {\r\n                hours: prev.hours,\r\n                minutes: parseInt(e.target.value),\r\n                seconds: prev.seconds,\r\n              };\r\n            })\r\n          }\r\n          value={cdtime.minutes}\r\n        ></input>\r\n\r\n        <h1>:</h1>\r\n\r\n        <input\r\n          type=\"number\"\r\n          max=\"60\"\r\n          onChange={(e) =>\r\n            setCdtime((prev) => {\r\n              return {\r\n                hours: prev.hours,\r\n                minutes: prev.minutes,\r\n                seconds: parseInt(e.target.value),\r\n              };\r\n            })\r\n          }\r\n          value={cdtime.seconds}\r\n        ></input>\r\n      </div>\r\n\r\n      <div\r\n        className={play ? \"playButton pause\" : \"playButton\"}\r\n        onClick={() => setPlay((p) => !p)}\r\n      ></div>\r\n\r\n      <img\r\n        src={restartImg}\r\n        alt=\"\"\r\n        onClick={() => setCdtime({ hours: 0, minutes: 0, seconds: 0 })}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Pomodoro = () => {\r\n  const [countdownTimer, setCountdownTimer] = useState({\r\n    work: { minutes: 25, seconds: 0 },\r\n    rest: { minutes: 5, seconds: 0 },\r\n  });\r\n  const [pomodoroState, setPomodoroState] = useState(\"work\");\r\n  const [play, setPlay] = useState(false);\r\n\r\n  const sound = new AudioPlayer();\r\n\r\n  function printTimer() {\r\n    let min, sec;\r\n    if (pomodoroState === \"work\") {\r\n      min = (\"00\" + countdownTimer.work.minutes.toString()).slice(-2);\r\n      sec = (\"00\" + countdownTimer.work.seconds.toString()).slice(-2);\r\n    } else {\r\n      min = (\"00\" + countdownTimer.rest.minutes.toString()).slice(-2);\r\n      sec = (\"00\" + countdownTimer.rest.seconds.toString()).slice(-2);\r\n    }\r\n    return `${min}:${sec}`;\r\n  }\r\n\r\n  function countdownFunc() {\r\n    if (pomodoroState === \"work\") {\r\n      /*WORK*/\r\n      setCountdownTimer((prevCDT) => {\r\n        if (prevCDT.work.minutes <= 0 && prevCDT.work.seconds <= 0) {\r\n          sound.play();\r\n          setPomodoroState(\"rest\");\r\n          return {\r\n            work: { minutes: 25, seconds: 0 },\r\n            rest: { minutes: 5, seconds: 0 },\r\n          };\r\n        } else {\r\n          if (prevCDT.work.seconds <= 0) {\r\n            return {\r\n              work: { minutes: prevCDT.work.minutes - 1, seconds: 59 },\r\n              rest: prevCDT.rest,\r\n            };\r\n          } else\r\n            return {\r\n              work: {\r\n                minutes: prevCDT.work.minutes,\r\n                seconds: prevCDT.work.seconds - 1,\r\n              },\r\n              rest: prevCDT.rest,\r\n            };\r\n        }\r\n      });\r\n    } else {\r\n      /*REST*/\r\n      setCountdownTimer((prevCDT) => {\r\n        if (prevCDT.rest.minutes <= 0 && prevCDT.rest.seconds <= 0) {\r\n          sound.play();\r\n          setPomodoroState(\"work\");\r\n          return {\r\n            work: { minutes: 25, seconds: 0 },\r\n            rest: { minutes: 5, seconds: 0 },\r\n          };\r\n        } else {\r\n          if (prevCDT.rest.seconds <= 0) {\r\n            return {\r\n              work: prevCDT.work,\r\n              rest: { minutes: prevCDT.rest.minutes - 1, seconds: 59 },\r\n            };\r\n          } else\r\n            return {\r\n              work: prevCDT.work,\r\n              rest: {\r\n                minutes: prevCDT.rest.minutes,\r\n                seconds: prevCDT.rest.seconds - 1,\r\n              },\r\n            };\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function resetPomodoroTimer() {\r\n    setCountdownTimer({\r\n      work: { minutes: 25, seconds: 0 },\r\n      rest: { minutes: 5, seconds: 0 },\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (play) countdownFunc();\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  return (\r\n    <div id=\"pomodoro\">\r\n      <h1>{pomodoroState === \"work\" ? \"Work\" : \"Rest\"}</h1>\r\n      <h1>{printTimer()}</h1>\r\n      <div\r\n        className={play ? \"playButton pause\" : \"playButton\"}\r\n        onClick={() => setPlay((p) => !p)}\r\n      ></div>\r\n      <img src={restartImg} alt=\"\" onClick={resetPomodoroTimer} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Timer = ({ setDraggedItem, id, setComponents, defaultPosition }) => {\r\n  const [type, setType] = useState(\"Stopwatch\");\r\n\r\n  function renderSwitch(t) {\r\n    switch (t) {\r\n      case \"Stopwatch\":\r\n        return <Stopwatch />;\r\n        break;\r\n      case \"Countdown\":\r\n        return <Countdown />;\r\n      case \"Pomodoro\":\r\n        return <Pomodoro />;\r\n      default:\r\n        return <h1>Error</h1>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Draggable\r\n      onStart={() => setDraggedItem(id)}\r\n      onStop={(e) => {\r\n        setOnLoadPosition(e, setComponents, id);\r\n        setDraggedItem(null);\r\n      }}\r\n      defaultPosition={defaultPosition}\r\n    >\r\n      <div id=\"timer\">\r\n        <div id=\"timerNavbar\">\r\n          <p\r\n            className={type === \"Stopwatch\" ? \"active\" : null}\r\n            onClick={() => setType(\"Stopwatch\")}\r\n          >\r\n            Stopwatch\r\n          </p>\r\n          <p\r\n            className={type === \"Countdown\" ? \"active\" : null}\r\n            onClick={() => setType(\"Countdown\")}\r\n          >\r\n            Countdown\r\n          </p>\r\n          <p\r\n            className={type === \"Pomodoro\" ? \"active\" : null}\r\n            onClick={() => setType(\"Pomodoro\")}\r\n          >\r\n            Pomodoro\r\n          </p>\r\n        </div>\r\n        {renderSwitch(type)}\r\n      </div>\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\audio\\audioPlayer.js",[],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\audio\\AudioPlayer.js",[],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\player\\player.menu-component.jsx",["62"],"import React, { useState } from \"react\";\r\nimport Draggable from \"react-draggable\";\r\nimport \"./player.styles.css\";\r\n\r\nimport { setOnLoadPosition } from \"../position-handler\";\r\n\r\nconst Player = ({ setDraggedItem, id, setComponents, defaultPosition }) => {\r\n  const [videoId, setVideoId] = useState(\"5qap5aO4i9A\"); // default lofi hip hop\r\n  const [query, setQuery] = useState(\"\");\r\n  const [display, setDisplay] = useState(true);\r\n\r\n  function getVideo() {\r\n    setVideoId(query.substring(query.indexOf(\"?v=\") + 3));\r\n\r\n    /* Code for data retrieving with API key*/\r\n    /*\r\n    const APIKEY=\"NOKEY\"\r\n    fetch(\r\n      `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=1&q=${query}&type=video&key=${APIKEY}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        //first video\r\n        setVideoId(data.items[0].id.videoId);\r\n      });\r\n      */\r\n  }\r\n\r\n  return (\r\n    <Draggable\r\n      onStart={() => setDraggedItem(id)}\r\n      onStop={(e) => {\r\n        setOnLoadPosition(e, setComponents, id);\r\n        setDraggedItem(null);\r\n      }}\r\n      defaultPosition={defaultPosition}\r\n    >\r\n      <div id=\"player\">\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            placeholder=\"Link, API key isn't implemented\"\r\n          ></input>\r\n\r\n          <button id=\"play\" onClick={() => getVideo()}>\r\n            Play\r\n          </button>\r\n\r\n          <button\r\n            id=\"toggleDisplay\"\r\n            onClick={() => setDisplay((prevState) => !prevState)}\r\n          >\r\n            {display ? \"Hide\" : \"Show\"}\r\n          </button>\r\n        </div>\r\n\r\n        <iframe\r\n          width=\"392\"\r\n          height=\"220\"\r\n          src={`https://www.youtube.com/embed/${videoId}`}\r\n          frameborder=\"0\"\r\n          allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n          allowfullscreen\r\n          style={{ display: display ? \"block\" : \"none\" }}\r\n        />\r\n\r\n        {display ? null : (\r\n          <h1 style={{ textAlign: \"center\" }}>Video hidden!</h1>\r\n        )}\r\n      </div>\r\n    </Draggable>\r\n  );\r\n};\r\nexport default Player;\r\n","C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\draw\\draw.menu-component.jsx",["63"],"C:\\Users\\Mladen\\Desktop\\React Practice\\workspace\\src\\components\\menu-components\\position-handler.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":76,"column":6,"nodeType":"70","endLine":76,"endColumn":13,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":18,"column":6,"nodeType":"70","endLine":18,"endColumn":12,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":277,"column":9,"nodeType":"76","messageId":"77","endLine":277,"endColumn":15},{"ruleId":"78","severity":1,"message":"79","line":58,"column":9,"nodeType":"80","endLine":66,"endColumn":11},{"ruleId":"68","severity":1,"message":"81","line":37,"column":6,"nodeType":"70","endLine":37,"endColumn":8,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data', 'id', and 'setComponents'. Either include them or remove the dependency array. If 'setComponents' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["85"],"React Hook useEffect has missing dependencies: 'id' and 'setComponents'. Either include them or remove the dependency array. If 'setComponents' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["86"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["87"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},"Update the dependencies array to be: [data, id, setComponents, todos]",{"range":"94","text":"95"},"Update the dependencies array to be: [id, setComponents, text]",{"range":"96","text":"97"},"Update the dependencies array to be: [data]",{"range":"98","text":"99"},[2027,2034],"[data, id, setComponents, todos]",[629,635],"[id, setComponents, text]",[1114,1116],"[data]"]